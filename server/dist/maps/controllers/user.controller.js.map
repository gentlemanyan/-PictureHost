{"version":3,"sources":["../../controllers/user.controller.ts"],"names":[],"mappings":";;AAKA;IACE,gBAAe,CAAC;IAET,KAAK,CAAC,MAAM,CAAC,GAAgB;QAClC,MAAM,MAAM,GAAG;YACb,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO;YACjC,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ;YACnC,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ;YACnC,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK;SAC9B,CAAC;IAaN,CAAC;IAEQ,KAAK,CAAC,GAAG,CAAC,GAAgB;IAEjC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAgB;IAEpC,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAgB;IAEpC,CAAC;CACF;AAEY,QAAA,IAAI,GAAG,IAAI,cAAc,EAAE,CAAC","file":"../../controllers/user.controller.js","sourcesContent":["import * as Koa from 'koa';\nimport config from '../config/config';\nimport * as crypto from 'crypto';\nimport {saltHash} from '../lib/auth';\n\nclass UserController {\n  constructor() {}\n\n  public async create(ctx: Koa.Context) {  \n    const reqObj = {\n      account: ctx.request.body.account,\n      password: ctx.request.body.password,\n      username: ctx.request.body.username,      \n      email: ctx.request.body.email,    \n    };\n\n    //const promise = User.insert( reqObj );\n\n    // await promise.then( (data) => {\n    //   ctx.status = 200;\n    //   ctx.body = {\n    //     retCode: '0000',\n    //     retMsg: 'register success',\n    //   };\n    // }, (err) => {\n    //   ctx.throw(err);\n    // });\n}\n\n  public async get(ctx: Koa.Context) {\n        \n  }\n\n  public async update(ctx: Koa.Context) {\n    \n  }\n\n  public async delete(ctx: Koa.Context) {\n    \n  }\n}\n\nexport const user = new UserController();\n"]}